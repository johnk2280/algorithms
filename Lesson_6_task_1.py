# 1. Подсчитать, сколько было выделено памяти под переменные
# в ранее разработанных программах в рамках первых трех уроков.
# Проанализировать результат и определить программы с наиболее эффективным использованием памяти.
#
# Примечание: По аналогии с эмпирической оценкой алгоритмов идеальным решением будет:
# a. выбрать хорошую задачу, которую имеет смысл оценивать по памяти;
# b. написать 3 варианта кода (один у вас уже есть);
#    проанализировать 3 варианта и выбрать оптимальный;
# c. результаты анализа (количество занятой памяти в вашей среде разработки)
#    вставить в виде комментариев в файл с кодом.
#    Не забудьте указать версию и разрядность вашей ОС и интерпретатора Python;
# d. написать общий вывод: какой из трёх вариантов лучше и почему.
#    Надеемся, что вы не испортили программы, добавив в них множество sys.getsizeof после каждой переменной,
#    а проявили творчество, фантазию и создали универсальный код для замера памяти.

# Python 3.8.5 (default, Jul 28 2020, 12:59:40)
# [GCC 9.3.0] on linux

# Выбранная задача Lesson_2 task_3:
# Сформировать из введенного числа обратное по порядку входящих в него цифр и вывести на экран.
# Например, если введено число 3486, надо вывести 6843.

import sys


def show_size(x, level=0):
    print('\t' * level, f'type= {x.__class__}, size= {sys.getsizeof(x)}, object= {x}')

    if hasattr(x, '__iter__'):
        if hasattr(x, 'items'):
            for xx in x.items():
                show_size(xx, level + 1)
        elif not isinstance(x, str):
            for xx in x:
                show_size(xx, level + 1)


number = input('Enter an integer: ')
print(sys.getsizeof(number))


# -----------------------------Вариант 1--------------------------------------------------------------------------------

s = ''
number1 = int(number)
while number1 > 0:
    m = number1 % 10
    number1 //= 10
    s += str(m)

show_size(s)
mem_sum1 = sys.getsizeof(number) + sys.getsizeof(m) + sys.getsizeof(s)
print(f'Затраты памяти под переменные в варианте 1: {mem_sum1} байт')
print()


# ------------------------------Вариант 2-------------------------------------------------------------------------------

num = ''.join(list(reversed(number)))

show_size(num)
mem_sum2 = sys.getsizeof(number) + sys.getsizeof(num)
print(f'Затраты памяти под переменные в варианте 2: {mem_sum2} байт')
print()


# -------------------------------Вариант 3------------------------------------------------------------------------------

result = ''
l = len(number)
for i in range(l - 1, -1, -1):
    result += number[i]

show_size(result)
mem_sum3 = sys.getsizeof(number) + sys.getsizeof(l) + sys.getsizeof(result)
print(f'Затраты памяти под переменные в варианте 3: {mem_sum3} байт')
print()

# --------------------------------Вариант 4. То же, что и вариант 3, только реализован через список.--------------------

result4 = []
l = len(number)
for i in range(l - 1, -1, -1):
    result4.append(number[i])


mem_list = 0
for el in result4:
    mem_list += sys.getsizeof(el)

r = ''.join(result4)
show_size(r)
show_size(result4)
mem_sum4 = sys.getsizeof(number) + sys.getsizeof(l) + sys.getsizeof(result4) + sys.getsizeof(r) + mem_list
print(f'Затраты памяти под переменные в варианте 4: {mem_sum4} байт')
print()

# --------------------------------Вариант 5----------------------------------------------------------------------------

result5 = number[::-1]
show_size(result5)
mem_sum5 = sys.getsizeof(number) + sys.getsizeof(result5)
print(f'Затраты памяти под переменные в варианте 5: {mem_sum5} байт')
print()

# Как видно из результатов работы программы приведенных ниже,
# наименьшие затраты памяти под переменные получились в варинтах 2 и 5. В обоих вариантах использовались 2 переменные.
# В вариантах 1 и 3 тоже одинаковые затраты памяти, но, т.к. используется больше переменных, затраты на память выше.
# Вариант 4 самый затратный на память для переменных, т.к. там сипользуется список.
# Однако, количество памяти выделяемой под переменные не дает нам полную картину по занимаемой памяти, т.к. в данном
# задании не учитывалась память занимаемая под обработку итераций.
#

# Enter an integer: 1234
#  type= <class 'str'>, size= 53, object= 4321
# Затраты памяти под переменные в варианте 1: 134 байт
#
#  type= <class 'str'>, size= 53, object= 4321
# Затраты памяти под переменные в варианте 2: 77 байт
#
#  type= <class 'str'>, size= 53, object= 4321
# Затраты памяти под переменные в варианте 3: 134 байт
#
#  type= <class 'str'>, size= 53, object= 4321
#  type= <class 'list'>, size= 88, object= ['4', '3', '2', '1']
# 	 type= <class 'str'>, size= 50, object= 4
# 	 type= <class 'str'>, size= 50, object= 3
# 	 type= <class 'str'>, size= 50, object= 2
# 	 type= <class 'str'>, size= 50, object= 1
# Затраты памяти под переменные в варианте 4: 422 байт
#
#  type= <class 'str'>, size= 53, object= 4321
# Затраты памяти под переменные в варианте 5: 106 байт


