# 1. Подсчитать, сколько было выделено памяти под переменные
# в ранее разработанных программах в рамках первых трех уроков.
# Проанализировать результат и определить программы с наиболее эффективным использованием памяти.
#
# Примечание: По аналогии с эмпирической оценкой алгоритмов идеальным решением будет:
# a. выбрать хорошую задачу, которую имеет смысл оценивать по памяти;
# b. написать 3 варианта кода (один у вас уже есть);
#    проанализировать 3 варианта и выбрать оптимальный;
# c. результаты анализа (количество занятой памяти в вашей среде разработки)
#    вставить в виде комментариев в файл с кодом.
#    Не забудьте указать версию и разрядность вашей ОС и интерпретатора Python;
# d. написать общий вывод: какой из трёх вариантов лучше и почему.
#    Надеемся, что вы не испортили программы, добавив в них множество sys.getsizeof после каждой переменной,
#    а проявили творчество, фантазию и создали универсальный код для замера памяти.

# Python 3.8.5 (default, Jul 28 2020, 12:59:40)
# [GCC 9.3.0] on linux

# Выбранная задача Lesson_3 task_7:
# 7. В одномерном массиве целых чисел определить два наименьших элемента.
# Они могут быть как равны между собой (оба минимальны), так и различаться.
import sys


def show_size(x, level=0):
    print('\t' * level, f'type= {x.__class__}, size= {sys.getsizeof(x)}, object= {x}')

    if hasattr(x, '__iter__'):
        if hasattr(x, 'items'):
            for xx in x.items():
                show_size(xx, level + 1)
        elif not isinstance(x, str):
            for xx in x:
                show_size(xx, level + 1)


spam = [170, 57, 18, -45, -9, 21, 20, -71, -62, 88, -98, -66, 68, 9, -3, 51, 11, 80, 14, 22]

# Вариант 1
a = min(spam)
b = min([el for el in spam if el != a])

sum_memory = sys.getsizeof(spam) + sys.getsizeof(a) + sys.getsizeof(b)

show_size(spam)
show_size(a)
show_size(b)
print(sum_memory)



